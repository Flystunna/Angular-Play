/**
 * Image Upload API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent, HttpErrorResponse
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable, throwError, BehaviorSubject } from 'rxjs';
import { map, retry } from 'rxjs/operators';

import { AddUserDTO } from '../model/addUserDTO';
import { LoginModel } from '../model/loginModel';
import { RefreshTokenModel } from '../model/refreshTokenModel';
import { serviceResponse } from '../model/serviceResponse';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { catchError } from 'rxjs/operators';
import { userDTO } from '../model/userDTO';
import { tokenDTO } from '../model/tokenDTO';


@Injectable({
    providedIn: 'root'
})
export class AccountService {

   // protected basePath = 'http://localhost:63515';
    protected basePath = 'http://localhost/ImageUpload.API';

    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    listUsers: userDTO[];
    private currentUserSubject: BehaviorSubject<tokenDTO>;
    public currentUser: Observable<tokenDTO>;
    

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
        this.currentUserSubject = new BehaviorSubject<tokenDTO>(JSON.parse(localStorage.getItem('currentuser')));
        this.currentUser = this.currentUserSubject.asObservable();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccountAddUserPost(body?: AddUserDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAccountAddUserPost(body?: AddUserDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAccountAddUserPost(body?: AddUserDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAccountAddUserPost(body?: AddUserDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
           // headers = headers.set('Authorization', `Bearer ${this.currentUserValue.token}`);
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        body.phoneNumber = body.phoneNumber.toString();
        body.nextOfKinPhone = body.nextOfKinPhone.toString();

        return this.httpClient.request<any>('post', `${this.basePath}/api/Account/AddUser`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError(this.handleError));
    }

    private handleError(error: HttpErrorResponse) {
        var errormessage = '';
        if (error.error instanceof ErrorEvent) {
            console.error('An error occurred: ', error.error.message);
            errormessage = 'An error occurred: ' + error.error.message;
        } else {
            console.error(`Backend returned code ${error.status}, ` + `Body was: ${error.error}`);
            errormessage = 'An error occurred: ' + error.error;
        }
        return throwError(errormessage);
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccountAuthPost(body?: LoginModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAccountAuthPost(body?: LoginModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAccountAuthPost(body?: LoginModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAccountAuthPost(body?: LoginModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/Account/Auth`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(retry(1), catchError(this.handleError));
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccountGetAllUsersGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAccountGetAllUsersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAccountGetAllUsersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAccountGetAllUsersGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get', `${this.basePath}/api/Account/GetAllUsers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(retry(1), catchError(this.handleError));
    }

    public apiGetAllUsers() {
        return this.httpClient.get<userDTO[]>(`${this.basePath}/api/Account/GetAllUsers`)
            .pipe(retry(1), catchError(this.handleError));
    }
    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccountGetCurrentUserClaimsGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAccountGetCurrentUserClaimsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAccountGetCurrentUserClaimsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAccountGetCurrentUserClaimsGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get', `${this.basePath}/api/Account/GetCurrentUserClaims`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccountGetProfileGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAccountGetProfileGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAccountGetProfileGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAccountGetProfileGet(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get', `${this.basePath}/api/Account/GetProfile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccountRefreshTokenPost(body?: RefreshTokenModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAccountRefreshTokenPost(body?: RefreshTokenModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAccountRefreshTokenPost(body?: RefreshTokenModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAccountRefreshTokenPost(body?: RefreshTokenModel, observe: any = 'body', reportProgress: boolean = false): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post', `${this.basePath}/api/Account/RefreshToken`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    public get currentUserValue(): tokenDTO {
        return this.currentUserSubject.value;
    }

    login(body?: LoginModel) {
        return this.httpClient.request<any>('post', `${this.basePath}/api/Account/Auth`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials
            }
        ).pipe(map((user: tokenDTO) => {
            if(user.token != null){
                localStorage.setItem('currentuser', JSON.stringify(user));
                this.currentUserSubject.next(user);
            }          
            return user;
        }), retry(1), catchError(this.handleError));
    }

    logout() {
        localStorage.removeItem('currentuser');
        localStorage.removeItem('currentUser');
        sessionStorage.removeItem('currentuser');
        sessionStorage.removeItem('currentUser');    
        this.currentUserSubject.next(null);
    }

}
